{"version":3,"sources":["webpack:///./src/pages/using-typescript.tsx","webpack:///./src/components/layout.js"],"names":["UsingTypescript","data","path","title","site","buildTime","href","to","Layout","props","state","isPreloaded","componentDidMount","this","timeoutId","setTimeout","setState","componentWillUnmount","clearTimeout","render","children","query","siteMetadata","meta","name","content","lang","className","Component"],"mappings":"6FAAA,oEAyBeA,UAZyC,SAAH,OAAMC,EAAI,EAAJA,KAAMC,EAAI,EAAJA,KAAI,OACnE,kBAAC,IAAM,KACL,kBAAC,IAAO,CAACC,MAAM,qBACf,sEACA,uEAA4C,wCAAiB,+DAA4D,2CAAoB,wEAC7I,uEAA4C,0CAAmB,oBAAiB,0CAAmB,gBAAa,yCAAkB,UAClI,6DAAkCD,EAAI,wBAAuBD,EAAKG,KAAKC,UAAS,KAChF,8DAAmC,uBAAGC,KAAK,6CAA2C,kCAAmC,KACzH,kBAAC,OAAI,CAACC,GAAG,KAAG,8B,+FCdVC,G,UAAM,YACV,WAAYC,GAAQ,IAAD,EAIf,OAHF,cAAMA,IAAM,MACPC,MAAQ,CACXC,aAAa,GACb,EALM,iBAMT,kBA8CA,OA9CA,EAEDC,kBAAA,WAAqB,IAAD,OAClBC,KAAKC,UAAYC,YAAW,WAC1B,EAAKC,SAAS,CAAEL,aAAa,MAC5B,MACJ,EAEDM,qBAAA,WACMJ,KAAKC,WACPI,aAAaL,KAAKC,YAErB,EAEDK,OAAA,WACE,IAAQC,EAAaP,KAAKJ,MAAlBW,SACAT,EAAgBE,KAAKH,MAArBC,YACR,OACE,kBAAC,cAAW,CACVU,MAAK,aASLF,OAAQ,SAAAlB,GAAI,OACV,oCACE,kBAAC,IAAM,CACLE,MAAOF,EAAKG,KAAKkB,aAAanB,MAC9BoB,KAAM,CACJ,CAAEC,KAAM,cAAeC,QAAS,cAChC,CAAED,KAAM,WAAYC,QAAS,eAG/B,0BAAMC,KAAK,QAEb,yBAAKC,UAAWhB,EAAc,uBAAyB,aACpDS,QAMZ,EApDS,CAASQ,cA2DNpB","file":"component---src-pages-using-typescript-tsx-736141a84cd97e26b1be.js","sourcesContent":["// If you don't want to use TypeScript you can delete this file!\nimport React from \"react\"\nimport { PageProps, Link, graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SideBar from \"../components/SideBar\"\n\ntype DataProps = {\n  site: {\n    buildTime: string\n  }\n}\n\nconst UsingTypescript: React.FC<PageProps<DataProps>> = ({ data, path }) => (\n  <Layout>\n    <SideBar title=\"Using TypeScript\" />\n    <h1>Gatsby supports TypeScript by default!</h1>\n    <p>This means that you can create and write <em>.ts/.tsx</em> files for your pages, components etc. Please note that the <em>gatsby-*.js</em> files (like gatsby-node.js) currently don't support TypeScript yet.</p>\n    <p>For type checking you'll want to install <em>typescript</em> via npm and run <em>tsc --init</em> to create a <em>.tsconfig</em> file.</p>\n    <p>You're currently on the page \"{path}\" which was built on {data.site.buildTime}.</p>\n    <p>To learn more, head over to our <a href=\"https://www.gatsbyjs.com/docs/typescript/\">documentation about TypeScript</a>.</p>\n    <Link to=\"/\">Go back to the homepage</Link>\n  </Layout>\n)\n\nexport default UsingTypescript\n\nexport const query = graphql`\n  {\n    site {\n      buildTime(formatString: \"YYYY-MM-DD hh:mm a z\")\n    }\n  }\n`\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport { StaticQuery, graphql } from 'gatsby';\n\nimport '../assets/sass/main.scss';\n\nclass Layout extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isPreloaded: true,\n    };\n  }\n\n  componentDidMount() {\n    this.timeoutId = setTimeout(() => {\n      this.setState({ isPreloaded: false });\n    }, 100);\n  }\n\n  componentWillUnmount() {\n    if (this.timeoutId) {\n      clearTimeout(this.timeoutId);\n    }\n  }\n\n  render() {\n    const { children } = this.props;\n    const { isPreloaded } = this.state;\n    return (\n      <StaticQuery\n        query={graphql`\n          query SiteTitleQuery {\n            site {\n              siteMetadata {\n                title\n              }\n            }\n          }\n        `}\n        render={data => (\n          <>\n            <Helmet\n              title={data.site.siteMetadata.title}\n              meta={[\n                { name: 'description', content: 'Eventually' },\n                { name: 'keywords', content: 'site, web' },\n              ]}\n            >\n              <html lang=\"en\" />\n            </Helmet>\n            <div className={isPreloaded ? 'main-body is-preload' : 'main-body'}>\n              {children}\n            </div>\n          </>\n        )}\n      />\n    );\n  }\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Layout;"],"sourceRoot":""}